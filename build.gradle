buildscript {
	repositories {
		mavenCentral()
		maven {
			name = 'sonatype-nexus-public'
			url = 'https://oss.sonatype.org/content/repositories/public/'
		}
		maven {
			name = 'forge-repo'
			url = 'http://files.minecraftforge.net/maven/'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins
{
	id "com.matthewprenger.cursegradle" version "1.0.7"
}

apply plugin: 'net.minecraftforge.gradle.forge'


sourceCompatibility = 1.8
targetCompatibility = 1.8
version = "1.11.2-4.0.0"
group = "net.malisis" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "malisisswitches"

// Extended project information
ext.projectName = 'MalisisSwitches'
ext.url = 'http://github.com/Ordinastie/MalisisSwitches'

dependencies
{
	//compile 'net.malisis:malisiscore:1.10.2-4.2.8:dev'
	compile files('../MalisisCore/build/libs/malisiscore-1.11.2-5.0.1-dev.jar')
}



minecraft {
    version = "1.11.2-13.20.0.2226"
    mappings = "snapshot_20170131"
    
	if(file("../../run").exists()) 	{
		runDir = "../../run/assets"
	}
	else {
		runDir = "assets"
	}
	
	replace '${version}', project.version
    replaceIn "MalisisSwitches.java"
}

processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// JAR manifest configuration
def commonManifest = {
		mainAttributes(	"Built-By": "Ordinastie",
						"Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
						"Implementation-Title": name,
						"Implementation-Version": version,
						"Implementation-Vendor": url,
						"FMLCorePlugin": "net.malisis.switches.asm.MalisisSwitchesPlugin",
						"FMLCorePluginContainsFMLMod": true)
}
jar.manifest commonManifest


// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
	manifest commonManifest
    from sourceSets.main.output
    from sourceSets.main.allJava
    classifier = 'dev'
}


artifacts {
    archives deobfJar
}

if (project.hasProperty('curseapi')) {
	curseforge {
		apiKey = curseapi
		project {
			id = '240828'
			releaseType = 'release'
					
			addArtifact deobfJar
			addArtifact sourceJar
			
			relations {
				requiredLibrary 'malisiscore'
			}
		}
	}
}